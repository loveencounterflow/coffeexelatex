// Generated by CoffeeScript 1.6.3
(function() {
  var BAP, CX, Line_by_line, TRM, TYPES, alert, app, badge, days, debug, eventually, express, express_options, help, hours, info, log, milliseconds, minutes, months, njs_fs, njs_path, njs_url, rpr, seconds, server_options, view, warn, weeks, whisper, years, _echo;

  njs_fs = require('fs');

  njs_path = require('path');

  njs_url = require('url');

  BAP = require('coffeenode-bitsnpieces');

  TYPES = require('coffeenode-types');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'CX/server';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  debug = TRM.get_logger('debug', badge);

  alert = TRM.get_logger('alert', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  _echo = TRM.echo.bind(TRM);

  eventually = process.nextTick;

  Line_by_line = require('line-by-line');

  express = require('express');

  CX = require('./main');

  milliseconds = 1;

  seconds = 1000 * milliseconds;

  minutes = 60 * seconds;

  hours = 60 * minutes;

  days = 24 * hours;

  weeks = 7 * days;

  months = 30 * days;

  years = 365 * days;

  server_options = {
    'host': '127.0.0.1',
    'port': 8910
  };

  express_options = {
    'static-routes': ['public', 'common'],
    'logger': {
      'format': 'dev'
    }
  };

  this.get_view = function() {
    return (function(_this) {
      return function(name, options) {
        log('retrieving view for', name);
        return function(request, response) {
          var R, command, crumbs, headers, message, parameter, parameters, status, texroute, url, _ref, _ref1;
          url = request['url'];
          url = (njs_url.parse(url, true))['path'];
          url = decodeURIComponent(url);
          url = url.replace(/\++/g, ' ');

          /* TAINT the NodeJS docs say: [the 'binary'] encoding method is deprecated and should be avoided
            [...] [it] will be removed in future versions of Node
           */
          url = new Buffer(url, 'binary');
          url = url.toString('utf-8');
          crumbs = (url.replace(/^\//, '')).split('/');
          texroute = crumbs[0];
          command = crumbs[1];
          parameter = (_ref = crumbs[2]) != null ? _ref : '';
          parameters = parameter.split(',');
          debug('©45f request for:', name);
          debug('©45f url:        ', url);
          debug('©45f crumbs:     ', crumbs);
          debug('©45f texroute:   ', texroute);
          debug('©45f command:    ', command);
          debug('©45f parameter:  ', parameter);
          if (CX[command] == null) {
            message = "Unknown command: " + (rpr(command));
            warn(message);
            R = CX._pen_debug(message);
          } else {
            R = (_ref1 = CX[command].apply(CX, parameters)) != null ? _ref1 : '';
          }
          status = 200;
          headers = {
            'Content-Type': 'text/plain'
          };
          response.writeHeader(status, headers);
          response.write(R);
          return response.end();
        };
      };
    })(this);
  };

  app = express();

  view = this.get_view();

  app.use(express.json());

  app.use(express.urlencoded());

  app.use(express.logger(express_options['logger']['format']));

  app.get('*', view('all'));

  app.use(view('not_found'));

  app.listen(server_options['port'], function(error) {
    if (error != null) {
      throw error;
    }
    return log(TRM.green("listening to " + server_options['host'] + ":" + server_options['port']));
  });

}).call(this);
