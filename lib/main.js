// Generated by CoffeeScript 1.6.3
(function() {
  var BAP, TRM, TYPES, alert, badge, debug, echo, help, info, log, njs_fs, njs_util, rpr, warn, whisper;

  njs_util = require('util');

  njs_fs = require('fs');

  BAP = require('coffeenode-bitsnpieces');

  TYPES = require('coffeenode-types');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'scratch';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  echo = TRM.echo.bind(TRM);

  this.main = function() {

    /* The `main` routine collects the command name and command parameters from the environment
     */
    var command, message, method_name, parameter, parameters;
    command = process.argv[2];
    parameter = process.argv[3];

    /* TAINT we na√Øvely split on comma, which is not robust in case e.g. string or list literals contain
    that character. Instead, we should be doing parsing (eg. using JSON? CoffeeScript expressions /
    signatures?)
     */
    parameters = parameter.split(',');
    method_name = command.replace(/-/g, '_');
    if (this[method_name] == null) {
      message = "!!! Unknown command: " + (rpr(command)) + " !!!";
      log(message);
      echo(message);
      return null;
    }
    echo(this[method_name].apply(this, parameters));
    return null;
  };

  this.debug = function(message) {
    echo("\\textbf{\\textcolor{red}{" + (this.escape(message)) + "}}");
    return echo(message);
  };

  debug = this.debug.bind(this);

  this.page_and_line_nr = function(page_nr, line_nr) {
    page_nr = parseInt(page_nr, 10);
    line_nr = parseInt(line_nr, 10);
    return "helo from NodeJS.\"\nthis paragraph appears on page " + page_nr + ", column ..., line " + line_nr + ".";
  };

  this._escape_replacements = [[/\\/g, '\\textbackslash{}'], [/\{/g, '\\{'], [/\}/g, '\\}'], [/&/g, '\\&'], [/\$/g, '\\$'], [/\#/g, '\\#'], [/%/g, '\\%'], [/_/g, '\\_'], [/\^/g, '\\textasciicircum{}'], [/~/g, '\\textasciitilde{}']];

  this.escape = function(text) {
    var R, matcher, replacement, _i, _len, _ref, _ref1;
    R = text;
    _ref = this._escape_replacements;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ref1 = _ref[_i], matcher = _ref1[0], replacement = _ref1[1];
      R = R.replace(matcher, replacement);
    }
    return R;
  };

  this.main();

}).call(this);
